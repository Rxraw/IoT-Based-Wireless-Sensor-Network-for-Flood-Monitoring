#define BLYNK_TEMPLATE_ID "TMPL6j8rtAbhx"
#define BLYNK_TEMPLATE_NAME "water 1"
#define BLYNK_AUTH_TOKEN "eGomiTOVKloA0uB_Jbp9R1LGRZcz798i"

#include <Wire.h>
#include <LiquidCrystal_PCF8574.h>
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
#include <NewPing.h>
#include <LoRa.h>

// Wi-Fi credentials
const char ssid[] = "RATIO GUEST";  
const char pass[] = "Rr654321"; 

// Initialize LCD: I2C address 0x27
LiquidCrystal_PCF8574 lcd(0x27);

// Ultrasonic Sensor Pins and Settings
#define TRIG_PIN 5
#define ECHO_PIN 27
#define MAX_DISTANCE 9    // Maximum distance to measure (in cm)

// Calibration constants
const float MIN_DISTANCE = 1.0;           // cm, distance when full
const float MAX_MEASURE_DISTANCE = 9.0;   // cm, distance when empty

// Initialize NewPing
NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);

// Blynk Timer
BlynkTimer timer;

// LoRa Module Pins
#define SS_PIN 17   // Chip Select
#define RST_PIN 14  // Reset
#define DIO0_PIN 26 // Interrupt

// Variables to store sensor data
int distance;

// Variables to track previous status for LCD updates and notifications
String previousStatusLCD = "";
int previousDistance = -1;

void measureWaterLevel() {
  // Trigger the ultrasonic sensor and get distance
  distance = sonar.ping_cm();
  
  // Check if distance is valid
  if (distance == 0) {
    distance = MAX_MEASURE_DISTANCE; // Treat as no reading, assume empty
  }

  // Calculate water level percentage
  float waterLevel;
  if (distance <= MIN_DISTANCE) {
    waterLevel = 100.0;  // Full
  } else if (distance >= MAX_MEASURE_DISTANCE) {
    waterLevel = 0.0;    // Empty
  } else {
    waterLevel = ((MAX_MEASURE_DISTANCE - distance) / (MAX_MEASURE_DISTANCE - MIN_DISTANCE)) * 100.0;
    waterLevel = constrain(waterLevel, 0, 100);
  }

  // Determine status based on water level
  String status;
  if (waterLevel < 5) {
    status = "Empty";
  } else if (waterLevel < 30) {
    status = "Quarter";
  } else if (waterLevel < 70) {
    status = "Half";
  } else if (waterLevel < 95) {
    status = "Almost Full";
  } else {
    status = "Full";
  }

  // Print to Serial Monitor for debugging
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.print(" cm, Water Level: ");
  Serial.print(waterLevel);
  Serial.print("%, Status: ");
  Serial.println(status);

  // Send data to Blynk app if connected
  if (Blynk.connected()) {
    Blynk.virtualWrite(V1, status);      // Textual status
    Blynk.virtualWrite(V2, distance);    // Raw distance value
  }

  // If status changed, trigger corresponding Blynk event
  if (status != previousStatusLCD) {
    if (status == "Empty") {
      Blynk.logEvent("empty_level");
    } else if (status == "Quarter") {
      Blynk.logEvent("quarter_level");
    } else if (status == "Half") {
      Blynk.logEvent("half_level");
    } else if (status == "Almost Full") {
      // Note: The event name is "almost_full_level" as shown in your image, 
      // even though there's a typo in "almost".
      Blynk.logEvent("alomost_full_level");
    } else if (status == "Full") {
      Blynk.logEvent("full_level");
    }
  }

  // Update LCD Display only if there is a change
  if (status != previousStatusLCD || distance != previousDistance) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Status: ");
    lcd.print(status);
    lcd.setCursor(0, 1);
    lcd.print("Dist: ");
    lcd.print(distance);
    lcd.print(" cm");
    previousStatusLCD = status;
    previousDistance = distance;
  }
  
  // Send data via LoRa
  LoRa.beginPacket();
  LoRa.print("Distance: ");
  LoRa.print(distance);
  LoRa.println(" cm");
  LoRa.endPacket();
}

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Initialize LCD
  lcd.begin(16, 2);
  lcd.setBacklight(255);
  lcd.setCursor(0, 0);
  lcd.print("Initializing...");

  // Set Ultrasonic Sensor Pins
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  // Initialize Blynk
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  // Wait until connected to Wi-Fi
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to Wi-Fi...");
    lcd.setCursor(0, 1);
    lcd.print("Wi-Fi Connecting...");
  }

  // Once connected to Wi-Fi
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Wi-Fi Connected!");
  Serial.println("Wi-Fi Connected!");
  delay(2000); // Display message for 2 seconds

  // Initialize LoRa Module with retry mechanism
  LoRa.setPins(SS_PIN, RST_PIN, DIO0_PIN);
  const int maxRetries = 5;
  int retryCount = 0;
  while (!LoRa.begin(433E6) && retryCount < maxRetries) {  // Set frequency to 433 MHz
    Serial.println("LoRa Initialization Failed! Retrying...");
    lcd.setCursor(0, 1);
    lcd.print("LoRa Failed! Retry ");
    lcd.print(retryCount + 1);
    delay(2000);
    retryCount++;
  }
  
  if (retryCount == maxRetries) {
    Serial.println("LoRa Initialization Failed after retries!");
    lcd.setCursor(0, 1);
    lcd.print("LoRa Failed!");
    while (1);
  }

  Serial.println("LoRa Initialized Successfully!");
  lcd.setCursor(0, 1);
  lcd.print("LoRa Ready!");

  // Set Timer to Measure Water Level Every 2 Seconds
  timer.setInterval(2000L, measureWaterLevel);
}

void loop() {
  // Run Blynk
  Blynk.run();

  // Run Timers
  timer.run(); 
}